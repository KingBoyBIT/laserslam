using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace RadarNavApp
{
	public enum CmdType
	{
		Measure,
		DeviceStatus
	}
	public class RadarData
	{
		private CmdType cmdtype;
		private int len;
		private byte frametype;
		private byte addr;
		private UInt16 crc16;

		private double[] distance;
		private int[] signal;
		private double radarspeed;
		private double zeroOffset;
		private double initAngle;
		private double[] realangle;
		
		#region crc_TABLE
		private static byte[] aucCRCHi = {
	0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
	0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
	0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
	0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
	0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
	0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
	0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
	0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
	0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
	0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
	0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
	0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
	0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
	0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
	0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
	0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
	0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
	0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
	0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
	0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
	0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
	0x00, 0xC1, 0x81, 0x40};
		private static byte[] aucCRCLo = {
	0x00, 0xC0, 0xC1, 0x01, 0xC3, 0x03, 0x02, 0xC2, 0xC6, 0x06, 0x07, 0xC7,
	0x05, 0xC5, 0xC4, 0x04, 0xCC, 0x0C, 0x0D, 0xCD, 0x0F, 0xCF, 0xCE, 0x0E,
	0x0A, 0xCA, 0xCB, 0x0B, 0xC9, 0x09, 0x08, 0xC8, 0xD8, 0x18, 0x19, 0xD9,
	0x1B, 0xDB, 0xDA, 0x1A, 0x1E, 0xDE, 0xDF, 0x1F, 0xDD, 0x1D, 0x1C, 0xDC,
	0x14, 0xD4, 0xD5, 0x15, 0xD7, 0x17, 0x16, 0xD6, 0xD2, 0x12, 0x13, 0xD3,
	0x11, 0xD1, 0xD0, 0x10, 0xF0, 0x30, 0x31, 0xF1, 0x33, 0xF3, 0xF2, 0x32,
	0x36, 0xF6, 0xF7, 0x37, 0xF5, 0x35, 0x34, 0xF4, 0x3C, 0xFC, 0xFD, 0x3D,
	0xFF, 0x3F, 0x3E, 0xFE, 0xFA, 0x3A, 0x3B, 0xFB, 0x39, 0xF9, 0xF8, 0x38,
	0x28, 0xE8, 0xE9, 0x29, 0xEB, 0x2B, 0x2A, 0xEA, 0xEE, 0x2E, 0x2F, 0xEF,
	0x2D, 0xED, 0xEC, 0x2C, 0xE4, 0x24, 0x25, 0xE5, 0x27, 0xE7, 0xE6, 0x26,
	0x22, 0xE2, 0xE3, 0x23, 0xE1, 0x21, 0x20, 0xE0, 0xA0, 0x60, 0x61, 0xA1,
	0x63, 0xA3, 0xA2, 0x62, 0x66, 0xA6, 0xA7, 0x67, 0xA5, 0x65, 0x64, 0xA4,
	0x6C, 0xAC, 0xAD, 0x6D, 0xAF, 0x6F, 0x6E, 0xAE, 0xAA, 0x6A, 0x6B, 0xAB,
	0x69, 0xA9, 0xA8, 0x68, 0x78, 0xB8, 0xB9, 0x79, 0xBB, 0x7B, 0x7A, 0xBA,
	0xBE, 0x7E, 0x7F, 0xBF, 0x7D, 0xBD, 0xBC, 0x7C, 0xB4, 0x74, 0x75, 0xB5,
	0x77, 0xB7, 0xB6, 0x76, 0x72, 0xB2, 0xB3, 0x73, 0xB1, 0x71, 0x70, 0xB0,
	0x50, 0x90, 0x91, 0x51, 0x93, 0x53, 0x52, 0x92, 0x96, 0x56, 0x57, 0x97,
	0x55, 0x95, 0x94, 0x54, 0x9C, 0x5C, 0x5D, 0x9D, 0x5F, 0x9F, 0x9E, 0x5E,
	0x5A, 0x9A, 0x9B, 0x5B, 0x99, 0x59, 0x58, 0x98, 0x88, 0x48, 0x49, 0x89,
	0x4B, 0x8B, 0x8A, 0x4A, 0x4E, 0x8E, 0x8F, 0x4F, 0x8D, 0x4D, 0x4C, 0x8C,
	0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46, 0x86, 0x82, 0x42, 0x43, 0x83,
	0x41, 0x81, 0x80, 0x40};

		internal CmdType Cmdtype
		{
			get
			{
				return cmdtype;
			}

			set
			{
				cmdtype = value;
			}
		}

		internal CmdType Cmdtype1
		{
			get
			{
				return cmdtype;
			}

			set
			{
				cmdtype = value;
			}
		}

		public double[] Distance
		{
			get
			{
				return distance;
			}

			set
			{
				distance = value;
			}
		}
		#endregion
		public RadarData()
		{
			Cmdtype = CmdType.Measure;
			len = 0;
			addr = 0x00;
			frametype = 0x61;
			distance = new double[0];
			signal = new int[0];
			realangle = new double[0];
			zeroOffset = 0;
			initAngle = 0;
			crc16 = 0;
		}

		public CmdType getSuccesss()
		{
			return this.cmdtype;
		}
		public double[] getdis()
		{
			return this.distance;
		}
		public double getinitAngle()
		{
			return this.initAngle;
		}
		public double[] getrealAngle()
		{
			return this.realangle;
		}
		public bool BuildRadarData(byte[] data)
		{
			int result = 0;
			//帧头判断
			if (data.Length<6)
			{
				return false;
			}
			if (data[0]!=0xaa||data[3]!=0x00|| data[4] != 0x61 ||data[5]!=0xad)
			{
				result = 1;
			}
			//crc判断
			if (result ==0)
			{
				this.Cmdtype = CmdType.Measure;
				this.addr = data[3];
				this.len = data[1] * 256 + data[2];
				this.frametype = 0x61;

				//校验是否正确
				if (true== Check_CRC16code(data,data[1]*256+data[2],(UInt16)(data[data.Length-2]*256+data[data.Length-1])))
				{
					this.crc16 = (UInt16)(data[data.Length - 2] * 256 + data[data.Length - 1]);

					byte[] paradata = new byte[data[1] * 256 + data[2] - 8];
					Array.Copy(data, 8, paradata, 0, paradata.Length);
					byte[] tmpdata = new byte[(int)(paradata.Length - 5)];
					Array.Copy(paradata, 5, tmpdata, 0, tmpdata.Length);

					this.radarspeed = paradata[0]*0.05;
					short a;
					a = (short)(paradata[1] * 256 + paradata[2]);
					if (a > (2 ^ 15))
						a = (short)(-((short)(a^0xffff) + 1));
					short b = (short)(paradata[3] * 256 + paradata[4]);
					this.zeroOffset = (double)a/100.0;
					this.initAngle = (double)b/100.0+this.zeroOffset;
					this.distance = new double[tmpdata.Length / 3];
					this.signal = new int[this.distance.Length];
					this.realangle = new double[this.distance.Length];
					for (int i = 0; i < this.distance.Length; i++)
					{
						this.distance[i] = (tmpdata[i * 3 + 1] * 256 + tmpdata[i * 3 + 2]) * 0.25;
						this.signal[i] = tmpdata[i * 3];
						this.realangle[i] = this.initAngle + (double)(i) / this.distance.Length * 22.5;
						if (this.realangle[i]>180.0)
						{
							this.realangle[i] -= 360;
						}
						if (this.realangle[i] < -180.0)
						{
							this.realangle[i] += 360;
						}
					}
				}
				else
				{
					result = 1;
				}
			}

			if (result == 0)
			{
				return true;
			}
			else
			{
				return false;
			}
		}
		private static UInt16 usMBCRC16(ref byte[] pucFrame, int usLen)
		{
			byte ucCRCHi = 0xFF;
			byte ucCRCLo = 0xFF;
			int iIndex;

			int ct = 0;
			while (usLen-- != 0)
			{
				iIndex = ucCRCLo ^ (pucFrame[ct++]);
				ucCRCLo = (byte)(ucCRCHi ^ aucCRCHi[iIndex]);
				ucCRCHi = aucCRCLo[iIndex];
			}
			return (UInt16)(ucCRCHi << 8 | ucCRCLo);
		}
		public static bool Check_CRC16code(byte[] data, int len, UInt16 CRC16)
		{
			UInt16 crc_calc;

			crc_calc = usMBCRC16(ref data, len);
			if (crc_calc == CRC16)
			{
				return true;
			}
			else
			{
				return false;
			}
		}
	}

}
